{"version":3,"sources":["spacex.jpg","components/LaunchItems.js","components/Launches.js","components/Details.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItems","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","LAUNCHES_QUERY","gql","Launch","state","Fragment","style","backgroundColor","width","height","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Details","this","props","match","params","parseInt","variables","launch_year","React","client","ApolloClient","uri","App","src","spacex","alt","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2a33af34.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spacex.7dab9996.jpg\";","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport Moment from 'react-moment';\r\nimport {\r\n    Link\r\n}from 'react-router-dom';\r\n//import Details from './Details';\r\n\r\nexport default function LaunchItems(\r\n    {\r\n        launch:{\r\n            flight_number,\r\n            mission_name,\r\n            launch_date_local,\r\n            launch_success\r\n        }\r\n        \r\n}) {\r\n    //console.log(props.launch)\r\n    return(\r\n        \r\n        <div className=\"card card-body mb-3\">\r\n            <div className=\"row\">\r\n                <div className =\"col-md-9\">\r\n                    <h4><span className={classNames({\r\n                        \"text-success\" : launch_success,\r\n                        \"text-danger\" : !launch_success\r\n                    })}>Mission name: {mission_name}</span> </h4>\r\n                    <p>Date : <Moment format=\"YYYY-mm-DD HH:MM\" >{launch_date_local}</Moment> </p>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <Link to={`/launch/${flight_number}`}><button className=\"btn btn-secondary\">Details</button></Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {Component} from 'react';\r\nimport gql from 'graphql-tag';\r\nimport {Query} from 'react-apollo';\r\nimport LaunchItems from './LaunchItems';\r\n\r\n\r\nconst  LAUNCHES_QUERY = gql`\r\n    query LaunchesQuery{\r\n        launches{\r\n            flight_number\r\n            mission_name\r\n            launch_date_local\r\n            launch_year\r\n            launch_success\r\n        }\r\n    }\r\n\r\n`;\r\nclass Launch extends Component {\r\n    state = {  }\r\n    render() { \r\n        return (\r\n            <React.Fragment>\r\n                <div>\r\n                    <h1 className=\"display-4 my-3\">Launches</h1>\r\n                    <div className=\"my-3\">\r\n                        <p>\r\n                            <div className=\"text-success\" style={{backgroundColor:'green',width:20,height:10}}></div>Success\r\n                        </p>\r\n                        <p>\r\n                            <div className=\"text-success\" style={{backgroundColor:'red',width:20,height:10}}></div>Fail\r\n                        </p>\r\n                    </div>\r\n                    \r\n                    <Query query={LAUNCHES_QUERY}>\r\n                        {\r\n                            ({loading,error,data})=>{\r\n                                if(loading) return <div>Loading...</div>\r\n                                if(error) console.log(error)\r\n\r\n                                //console.log(data)\r\n                                //const {flight_number, mission_name} = data.launches;\r\n                                return(\r\n                                    <React.Fragment>\r\n                                        {\r\n                                            data.launches.map(\r\n                                                launch => (\r\n                                                    <LaunchItems key={launch.flight_number} launch={launch}/>\r\n                                                )\r\n                                            )\r\n                                        }\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n                        }\r\n                    </Query>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Launch;","import React,{Fragment} from 'react';\r\nimport gql from 'graphql-tag';\r\nimport {Query} from 'react-apollo';\r\nimport classNames from 'classnames';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nconst LAUNCH_QUERY = gql`\r\n    query LaunchQuery($flight_number:Int!){\r\n        launch(flight_number:$flight_number){\r\n            flight_number\r\n            mission_name\r\n            launch_success\r\n            launch_date_local\r\n            launch_year\r\n        }\r\n    }\r\n\r\n\r\n\r\n`;\r\n\r\n\r\nexport default class Details extends React.Component{\r\n    render(){\r\n        let {flight_number} = this.props.match.params;\r\n        flight_number = parseInt(flight_number);\r\n        return(\r\n            <React.Fragment>\r\n                <Query query={LAUNCH_QUERY} variables={{flight_number}}>\r\n                    {\r\n                        ({loading,error,data})=>{\r\n                            if(loading)return <div>Loading...</div>\r\n                            if(error) console.log(error)\r\n                            //console.log(data)\r\n                            const {mission_name,\r\n                                    launch_success,\r\n                                    launch_date_local,\r\n                                    launch_year,\r\n                                    flight_number\r\n                            } = data.launch;\r\n                            return(\r\n                                <div>\r\n                                    <h1 className=\"display -4 my-3\">Mission : {mission_name}</h1>\r\n                                    <h4 className=\"mb-3\">Launch Details</h4>\r\n                                    <ul className=\"list-group\">\r\n                                        <li className=\"list-group-item\">Flight Number : {flight_number}</li>\r\n                                        <li className=\"list-group-item\">Launch Year : {launch_year}</li>\r\n                                        <li className=\"list-group-item\">Launch Success : \r\n                                            <span className={\r\n                                                classNames({\"text-success\" : launch_success,\r\n                                                            \"text-danger\":!launch_success})\r\n                                            }>\r\n                                                {launch_success ? 'Yes':'No'}\r\n                                            </span> \r\n                                        </li>\r\n                                    </ul>\r\n                                    <Link to=\"/\" className=\"pt-2\"><button className=\"btn btn-secondary\">Back</button></Link>\r\n                                </div>\r\n                            )\r\n                        }\r\n                    }\r\n                </Query>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n} ","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo';\nimport './App.css';\nimport spacex from'./spacex.jpg';\nimport Launch from './components/Launches';\nimport Details from './components/Details';\n\nconst client = new ApolloClient({\n  uri : \"/graphql\"\n})\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img src={spacex} alt=\"spacex\" style={{width:400, height:150, display: 'block', margin:'auto'}}/>\n          <Route exact path=\"/\" component={Launch}/>\n          <Route exact path=\"/launch/:flight_number\" component={Details} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}